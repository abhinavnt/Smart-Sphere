<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Orders Page</title>
    <!-- <link rel="stylesheet" href="/css/admin/category.css">  -->
    <link rel="stylesheet" href="/css/admin/admin.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" >

    <style>
       .modal1 {
    display: none; /* Hidden by default */
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
    align-items: center;
    justify-content: center;
    z-index: 1000;
}

/* Modal content box */
.modal-content1 {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    width: 400px;
    max-width: 90%; /* Makes the modal responsive */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    text-align: center;
    margin-left: 40%;
    margin-top: 20%
}

       
  

        #orderedProducts {
  max-height: 300px; /* Adjust this height as needed */
  overflow-y: auto;  /* Add vertical scroll if content overflows */
  padding-right: 10px; /* Adjust padding to prevent scroll bar overlap */
}

/* Ensure product images are responsive and don't overflow */
#orderedProducts img {
  max-width: 100px; /* Set a maximum width for images */
  height: auto; /* Maintain aspect ratio */
  object-fit: cover; /* Prevent image distortion */
  margin-right: 10px; /* Space between image and text */
}
.body{
    background-color: black !important;
}
    </style>

        <!-- Add this line to load Font Awesome -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
        

    
    
</head>
<body class="bg-dark ">
    <!-- Sidebar -->
    <%- include('partials/_sidebar') %>

    <!-- Main Content -->
    <div class="main-content">
        <%- include('partials/_topBar') %>
        <h2 class="my-4 text-center">Orders</h2>
        <div class="d-flex justify-content-between my-3">
            <input type="text" id="searchInput" class="form-control w-25" placeholder="Search by Order ID or Customer Name">
            <input type="date" id="startDate" class="form-control w-25 mx-2" placeholder="Start Date">
            <input type="date" id="endDate" class="form-control w-25" placeholder="End Date">
            <select id="statusFilter" class="form-select w-25 mx-2">
                <option value="">Filter by Status</option>
                <option value="Pending">Pending</option>
                <option value="Processing">Processing</option>
                <option value="Shipped">Shipped</option>
                <option value="Delivered">Delivered</option>
                <option value="Cancelled">Cancelled</option>
            </select>
            <select id="paymentFilter" class="form-select w-25 mx-2">
                <option value="">Filter by Payment Status</option>
                <option value="Success">Success</option>
                <option value="Failed">Failed</option>
                <option value="Pending">Pending</option>
            </select>
        </div>

        <div class="category-section">
            <div class="table-responsive">
                <table class="table table-striped table-bordered table-dark">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Product</th>
                            <th>Status</th>
                            <th>Quantity</th>
                            <th>Total Price</th>
                            <th>Payment Method</th>
                            <th>Date</th>
                            <th>Action</th>
                            <th>Order Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.forEach(function(order) { %>
                            <% order.items.forEach(function(item) { %>
                            <tr>
                                <td><%= order._id %></td>
                                <td><%= order.userID.username %></td>
                                <td><%= item.productID.name %></td>
                                <td>
                                    <% if (item.cancelled) { %>
                                        <span class="badge bg-danger">Cancelled</span>
                                    <% } else if (item.cancellationRequested) { %>
                                        <span class="badge bg-warning">Cancellation Requested</span>
                                        <i class="fa fa-exclamation-circle text-primary" style="cursor:pointer;" 
                                           onclick="showCancellationModal('<%= item.cancellationReason %>', '<%= order._id %>', '<%= item.productID._id %>')"></i>
                                    <% } else if (item.returnRequested) { %>
                                        <span class="badge bg-info">Return Requested</span>
                                        <i class="fa fa-info-circle text-primary" style="cursor:pointer;" 
                                        onclick="showReturnModal('<%= item.returnReason %>', '<%= order._id %>', '<%= item.productID._id %>')"></i>
                                    <% } else { %>
                                        <span class="badge bg-secondary"><%= item.Status %></span>
                                    <% } %>
                                </td>
                                <td><%= item.quantity %></td>
                                <td>â‚¹<%= item.price * item.quantity %></td>
                                <td>
                                    <%= order.paymentMethod %> - 
                                    <span class=" 
                                        <%= order.paymentStatus === 'Failed' ? 'text-danger' : (order.paymentStatus === 'Success' ? 'text-success' : 'text-warning') %>">
                                        <%= order.paymentStatus %>
                                    </span>
                                </td>
                                
                                <td><%= new Date(order.orderDate).toLocaleDateString() %></td>
                                <td>
                                    <div class="action-buttons">
                                        <% if (item.Status !== 'Cancelled') { %>
                                            <select class="form-control" onchange="changeItemStatus('<%= order._id %>', '<%= item.productID %>', this.value)">
                                                <option value="Pending" <%= item.Status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                                <option value="Processing" <%= item.Status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                                <option value="Shipped" <%= item.Status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                                <option value="Delivered" <%= item.Status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                                <option value="Cancelled" <%= item.Status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                            </select>
                                        <% } else { %>
                                            <span class=" text-white ">Cannot Change</span>
                                        <% } %>
                                    </div>
                                </td>
                                <td>
                                    <button style="background-color: #ff3366;" class="btn viewOrder btn-sm " data-id="<%= order._id %>">View Details</button>
                                </td>
                            </tr>
                            <% }); %>
                        <% }); %>
                    </tbody>
                </table>
            </div>

        <!-- Pagination -->
        <div class="pagination" aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <% if (currentPage > 1) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
                    </li>
                <% } %>
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                    </li>
                <% } %>
                <% if (currentPage < totalPages) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
                    </li>
                <% } %>
            </ul>
        </div>
    </div>
</div>


        <!-- Cancellation Reason Modal -->
        <div class="modal1" id="cancellationModal" style="display:none;">
            <div class="modal-content1">
                <span class="close" onclick="closeModal()">&times;</span>
                <h5>Cancellation Request</h5>
                <p id="cancellationReasonText"></p> <!-- Reason will be dynamically inserted here -->
                <button id="approveCancellationBtn">Approve Cancellation</button>
                <button onclick="closeModal()">Close</button>
            </div>
        </div>



       <!-- to show order details -->
<div class="modal fade" id="orderDetailModal" tabindex="-1" aria-labelledby="orderDetailModalLabel" aria-hidden="true">
  <div class="modal-dialog custom-modal">
    <div class="modal-content enhanced-modal">
      <div class="modal-header">
        <h5 class="modal-title" id="orderDetailModalLabel">Order Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <h5>Ordered Date: <span id="orderedDate"></span></h5>
        <h5>Order Time: <span id="orderTime"></span></h5>
        <h5>Status: <span id="orderStatus"></span></h5>
        
        <h5>Shipping Address:</h5>
        <p id="shippingAddress"></p>

        <h5 class="mb-2">Ordered Products:</h5>
        <div id="orderedProducts" class="row mb-4"></div>
        
        <h5>Total Amount: <span id="totalAmount"></span></h5>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

  


        
    
        
    
<!-- Include SweetAlert -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<!-- filter and search -->
<script>
  document.addEventListener("DOMContentLoaded", function() {
    const searchInput = document.getElementById('searchInput');
    const statusFilter = document.getElementById('statusFilter');
    const paymentFilter = document.getElementById('paymentFilter');
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const tableRows = document.querySelectorAll('tbody tr'); // Get all table rows

    // Function to filter rows
    function filterRows() {
        const searchValue = searchInput.value.toLowerCase();
        const selectedStatus = statusFilter.value;
        const selectedPayment = paymentFilter.value;
        const startDate = new Date(startDateInput.value);
        const endDate = new Date(endDateInput.value);
        
        tableRows.forEach(row => {
            const orderId = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
            const customerName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
            const orderStatus = row.querySelector('td:nth-child(4) span').textContent.toLowerCase();
            const paymentStatus = row.querySelector('td:nth-child(7) span').textContent.toLowerCase();
            const orderDate = new Date(row.querySelector('td:nth-child(8)').textContent);

            // Check if the row matches the search and filter criteria
            const matchesSearch = orderId.includes(searchValue) || customerName.includes(searchValue);
            const matchesStatus = selectedStatus === '' || orderStatus === selectedStatus.toLowerCase();
            const matchesPayment = selectedPayment === '' || paymentStatus === selectedPayment.toLowerCase();
            const matchesDate = (!isNaN(startDate) && !isNaN(endDate)) ? (orderDate >= startDate && orderDate <= endDate) : true;

            // Show or hide the row based on the conditions
            if (matchesSearch && matchesStatus && matchesPayment && matchesDate) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

    // Event listeners for search and filter
    searchInput.addEventListener('input', filterRows);
    statusFilter.addEventListener('change', filterRows);
    paymentFilter.addEventListener('change', filterRows);
    startDateInput.addEventListener('change', filterRows);
    endDateInput.addEventListener('change', filterRows);
});

</script>


<!-- order js -->
    <script>

        //changeorderstatus
        function changeItemStatus(orderId, productId, newStatus) {
    axios.patch(`/admin/orders/${orderId}/items/${productId}/status`, { status: newStatus })
        .then(response => {
            console.log('Item status updated successfully:', response.data);
            location.reload(); // Reload to reflect changes
        })
        .catch(error => {
            console.error('Error updating item status:', error);
            alert('Failed to update item status. Please try again.');
        });
}





        //order detailsview
        document.addEventListener("DOMContentLoaded", function () {
  const viewOrderButtons = document.querySelectorAll(".viewOrder");

  viewOrderButtons.forEach((button) => {
    button.addEventListener("click", function () {
      const orderId = this.getAttribute("data-id");
      console.log(orderId);
      
      // Fetch order details using Axios
      axios
        .get(`/admin/${orderId}/details`)
        .then((response) => {
          const order = response.data;

          // Populate the modal with order details
          document.getElementById("orderedDate").innerText = new Date(
            order.orderedDate
          ).toLocaleDateString();
          document.getElementById("orderTime").innerText = new Date(
            order.orderedDate
          ).toLocaleTimeString();
          document.getElementById("orderStatus").innerText = order.orderStatus;
          document.getElementById(
            "shippingAddress"
          ).innerText = `${order.shippingAddress.fullname}, ${order.shippingAddress.address},  ${order.shippingAddress.pincode}`;

          const productsContainer = document.getElementById("orderedProducts");
          productsContainer.innerHTML = ""; // Clear previous content

          order.items.forEach((item) => {
            productsContainer.innerHTML += `
                            <div class="col-md-4">
                                <div class="card mb-3">
                                    <img src="/${item.productID.images[0]}" class="card-img-top" alt="${item.productID.name}">
                                    <div class="card-body">
                                        <h5 class="card-title">${item.productID.name}</h5>
                                        <p class="card-text">Price: â‚¹${item.price}</p>
                                        <p class="card-text">Quantity: ${item.quantity}</p>
                                    </div>
                                </div>
                            </div>
                        `;
          });

          document.getElementById(
            "totalAmount"
          ).innerText = `â‚¹${order.totalAmount}`;

          // Show the modal
          const modal = new bootstrap.Modal(
            document.getElementById("orderDetailModal")
          );
          modal.show();
        })
        .catch((error) => {
          console.error("Error fetching order details:", error);
          alert("An error occurred while fetching order details here.");
        });
    });
  });
});

    





  // Approve cancellation modal
function showCancellationModal(reason, orderId, productId) {
    document.getElementById('cancellationReasonText').innerText = `Reason: ${reason}`;
    document.getElementById('cancellationModal').style.display = "block";

    // Attach orderId and productId to the Approve button click
    const approveBtn = document.getElementById('approveCancellationBtn');
    approveBtn.onclick = function() {
        approveProductCancellation(orderId, productId);
    };
}

// Function to close the modal
function closeModal() {
    document.getElementById('cancellationModal').style.display = "none";
}

// Function to approve product cancellation
function approveProductCancellation(orderId, productId) {
    const url = `/admin/orders/${orderId}/approve-cancellation/${productId}`;
    console.log('Making request to:', url); 
    
    axios.post(url)
        .then(response => {
            Swal.fire({
                title: 'Success!',
                text: 'Cancellation approved successfully.',
                icon: 'success',
                confirmButtonText: 'OK'
            }).then(() => {
                location.reload(); // Reload the page to reflect the changes
            });
        })
        .catch(error => {
            Swal.fire({
                title: 'Error!',
                text: 'Error approving cancellation. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            console.error('Error approving cancellation:', error);
        });
}

    </script>

    <!-- Popper.js (required by Bootstrap) -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.7/dist/umd/popper.min.js"></script>

<!-- Bootstrap JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>


<!-- return request -->
  <script>
   function showReturnModal(returnReason, orderId, productId) {
    Swal.fire({
        title: "Return Request",
        html: `
            <p>Reason: ${returnReason}</p>
            <p>Are you sure you want to approve this return request?</p>
        `,
        icon: "info",
        showCancelButton: true,
        confirmButtonColor: "#28a745",
        cancelButtonColor: "#d33",
        confirmButtonText: "Approve Return"
    }).then((result) => {
        if (result.isConfirmed) {
            
            approveReturnRequest(orderId, productId);
        }
    });
}

async function approveReturnRequest(orderId, productId) {
    try {
        
        const response = await axios.patch(`/admin/order/approve-return/${orderId}/${productId}`);
        
        if (response.status === 200) {
            
            Swal.fire("Approved!", response.data.message, "success");
            
            location.reload();
        } else {
           
            Swal.fire("Error!", response.data.message, "error");
        }
    } catch (error) {
        console.error("Error approving return:", error);
        Swal.fire("Error!", "An error occurred while approving the return.", "error");
    }
}


  </script>


</body>
</html>
